---
const { count = 400 } = Astro.props;
import '../styles/global.css';
---

<style is:global>
  .star {
    position: absolute;
    border-radius: 9999px;
    pointer-events: none;
  }
</style>

<div
  id="star-wrap"
  data-count={count}
  class="fixed inset-0 z-0 pointer-events-none bg-black overflow-hidden [perspective:300px]"
  aria-hidden="true"
></div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js" defer></script>

<script type="module">
  const isIOS =
    /iP(hone|od|ad)/.test(navigator.userAgent) ||
    (navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1);
  window.addEventListener("load", () => {
    const wrap = document.getElementById("star-wrap");
    const gs = window.gsap;
    if (!wrap || !gs) return;
    let w = wrap.clientWidth;
    let h = wrap.clientHeight;
    const base = Number(wrap.dataset.count || 400);
    const isSmall = matchMedia("(max-width: 640px)").matches;
    const NUM = isIOS ? Math.round(base * 0.35) : (isSmall ? Math.round(base * 0.6) : base);

    const SIZE_MIN = 1;
    const SIZE_MAX = 6;
    const rand = (a, b) => Math.random() * (b - a) + a;

    const frag = document.createDocumentFragment();

    for (let i = 0; i < NUM; i++) {
      const el = document.createElement("div");
      el.className = "star";

      const size = rand(SIZE_MIN, SIZE_MAX);
      const z = rand(-1200, -300);
      const speed = rand(12, 25);
      const baseOpacity = rand(0.3, 0.8);
      const flicker = rand(0.02, 0.06);
      const withGlow = i % 3 === 0;
      const color = `rgba(255,255,255,${baseOpacity.toFixed(2)})`;
      const glow  = `0 0 ${Math.round(size * 6)}px rgba(255,255,255,${Math.min(1, baseOpacity + 0.2).toFixed(2)})`;

      Object.assign(el.style, {
        width: `${size}px`,
        height: `${size}px`,
        left: `${rand(0, w)}px`,
        top: `${rand(0, h)}px`,
        background: color,
        boxShadow: withGlow ? glow : "none",
        transform: `translateZ(${z}px)`
      });

      frag.appendChild(el);
      gs.fromTo(
        el,
        { z },
        {
          z: 400,
          repeat: -1,
          ease: "none",
          duration: speed,
          onRepeat: () => { el.style.willChange = ""; }
        }
      );
      gs.to(el, {
        opacity: Math.min(1, baseOpacity + flicker),
        repeat: -1,
        yoyo: true,
        ease: "sine.inOut",
        duration: rand(2, 6),
        delay: rand(0, 4)
      });
    }
    wrap.appendChild(frag);
    let lastX = null, lastY = null, raf = 0;
    const queuePO = () => {
      if (raf) return;
      raf = requestAnimationFrame(() => {
        if (lastX != null && lastY != null) {
          gs.set(wrap, { css: { perspectiveOrigin: `${lastX}px ${lastY}px` } });
        }
        raf = 0;
      });
    };
    const updatePO = (e) => {
      const t = e.touches?.[0];
      lastX = (t ? t.clientX : e.clientX);
      lastY = (t ? t.clientY : e.clientY);
      queuePO();
    };
    window.addEventListener("mousemove", updatePO, { passive: true });
    window.addEventListener("touchmove", updatePO, { passive: true });

    window.addEventListener("resize", () => {
      w = wrap.clientWidth;
      h = wrap.clientHeight;
    }, { passive: true });
    document.addEventListener("visibilitychange", () => {
      if (document.hidden) gs.globalTimeline.pause();
      else gs.globalTimeline.resume();
    });
  });
</script>
