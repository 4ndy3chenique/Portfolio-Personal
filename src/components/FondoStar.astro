---
const { count = 220 } = Astro.props;
---
<style is:global>
  #star-canvas{
    position: fixed; inset: 0; z-index: 0; pointer-events: none;
    background: #000;
  }
</style>

<canvas id="star-canvas" aria-hidden="true"></canvas>

<script>
(function(){
  const isIOS = /iP(hone|od|ad)/.test(navigator.userAgent) ||
                (navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1);
  const reduce = window.matchMedia("(prefers-reduced-motion: reduce)").matches;
  const c = document.getElementById("star-canvas");
  if (!(c instanceof HTMLCanvasElement)) return;

  // Fallback estático para iOS / reduced-motion
  if (isIOS || reduce) {
    c.style.background = "#000 radial-gradient(circle at 50% 50%, rgba(255,255,255,.7) 1px, transparent 1.6px) repeat";
    c.style.backgroundSize = "3px 3px";
    return;
  }

  const ctx = (c instanceof HTMLCanvasElement ? c : null)?.getContext("2d", { alpha: false });
  if (!ctx) return;
  let dpr = Math.min(window.devicePixelRatio || 1, 2);

  function resize(){
    if (!(c instanceof HTMLCanvasElement)) return;
    const w = c.clientWidth, h = c.clientHeight;
    c.width = Math.floor(w * dpr);
    c.height = Math.floor(h * dpr);
    if (ctx) ctx.setTransform(dpr,0,0,dpr,0,0);
  }

  const base = Number(/* astro-prop:count */ `<!--${Astro.props.count ?? 220}-->`.replace(/<!--|-->/g, ""));
  const mobile = window.matchMedia("(max-width: 640px)").matches;
  const N = mobile ? Math.round(base * 0.5) : base;

  function r(a: number,b: number){ return Math.random()*(b-a)+a; }

  const stars = Array.from({length:N}, () => ({
    x: r(0, window.innerWidth),
    y: r(0, window.innerHeight),
    z: r(0.6, 1.6),       // profundidad (afecta velocidad)
    s: r(0.6, 2.0),       // tamaño
    o: r(0.35, 0.9),      // opacidad base
    f: r(0.0, 0.02),      // leve flicker
    vx: r(-0.04, 0.04),   // deriva horizontal
    vy: r(0.08, 0.32)     // caída vertical
  }));

  function step(){
    if (!ctx || !(c instanceof HTMLCanvasElement)) return;
    ctx.fillStyle = "#000";
    ctx.fillRect(0, 0, c.clientWidth, c.clientHeight);

    const t = performance.now() * 0.001;
    for(const s of stars){
      s.y += s.vy * s.z;
      s.x += s.vx * s.z;

      if (s.y > c.clientHeight + 2) { s.y = -2; s.x = r(0, c.clientWidth); }
      if (s.x > c.clientWidth + 2) s.x = -2;
      if (s.x < -2) s.x = c.clientWidth + 2;

      const op = Math.max(0, Math.min(1, s.o + Math.sin(t + s.s) * s.f));
      ctx.globalAlpha = op;
      ctx.beginPath();
      ctx.arc(s.x, s.y, s.s, 0, Math.PI * 2);
      ctx.fillStyle = "#fff";
      ctx.fill();
    }
    ctx.globalAlpha = 1;
    raf = requestAnimationFrame(step);
  }

  let raf: number;
  function onResize(){ dpr = Math.min(window.devicePixelRatio||1, 2); resize(); }
  resize(); raf = requestAnimationFrame(step);

  window.addEventListener("resize", onResize, { passive:true });
  document.addEventListener("visibilitychange", () => {
    if (document.hidden) cancelAnimationFrame(raf);
    else raf = requestAnimationFrame(step);
  });
})();
</script>
